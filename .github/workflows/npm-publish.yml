name: Node.js Package

# This workflow runs only when a tag starting with "v" is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run build script (if defined)
        # The '|| echo' allows the workflow to pass even if the project
        # does not have a 'build' script defined in package.json
        run: npm run build || echo "No build step defined, skipping."

  publish-npm:
    name: Publish to npm
    # This job only runs after the 'build' job successfully completes
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20 for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # Sets up the registry for publishing and adds .npmrc for authentication
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Publish package
        run: npm publish
        env:
          # This secret is needed to authenticate with npm
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Create GitHub Release and Upload Artifact
    # This job only runs after the 'build' job successfully completes
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Creates the custom build artifact .tgz file
      - name: Create versioned release tarball
        run: |
          # Extract the version (tag name) from GITHUB_REF (e.g., 'v1.0.0')
          VERSION=${GITHUB_REF#refs/tags/}
          # Extract the repository name (e.g., 'my-repo')
          REPO_NAME=$(basename $GITHUB_REPOSITORY)

          mkdir -p release

          # Attempt to tar the 'dist/' folder first, or fall back to the root if 'dist/' doesn't exist
          # This creates a file like 'release/my-repo-v1.0.0.tgz'
          echo "Creating ${REPO_NAME}-${VERSION}.tgz..."
          tar -czf release/${REPO_NAME}-${VERSION}.tgz dist/ 2>/dev/null || tar -czf release/${REPO_NAME}-${VERSION}.tgz .

      # Creates the release and uploads the custom artifact
      - name: Upload versioned release tarball
        uses: softprops/action-gh-release@v1
        with:
          # Automatically uses the tag that triggered the workflow
          # Uses the custom tarball generated in the previous step
          files: release/${{ github.event.repository.name }}-${{ github.ref_name }}.tgz
          # The body will contain a list of changes
          generate_release_notes: true
        env:
          # This token is automatically available and needed for GitHub API access
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
